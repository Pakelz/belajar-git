- Git Started

    1. Using Git with Command Line
        git --version (To check git version and git alrd installed)
    
    2. Configure Git
        git config --global user.name "type name here"
        git config --global user.email "type email here"

        Note: Use global to set the username and e-mail for every repository on your computer.
        If you want to set the username/e-mail for just the current repo, you can remove global

    3. Creating Git Folder
        mkdir belajar-git (makes a new directory)
        cd belajar-git  (changes the current working directory)

        Note: If you already have a folder/directory you would like to use for Git:
        Navigate to it in command line, or open it in your file explorer, right-click and select "Git Bash here"

    4. Initialize Git
        git init

- Git Staging Environment 

    1. Git add New file
        git add index.html (add new file and staged)
        git status (to check file added to the staging environment)

    2. Git add more than one file
        git add --all (add all file )
        git status

- Git Commit 

    1. Git Commit
        git commit -m "First release of Hello World!" (The commit command performs a commit, and the -m "message" adds a message.)

    2. Git Commit without stage
        git status --short
        git commit -a -m "Updated index.html with a new line"

        Warning: Skipping the Staging Environment is not generally recommended.
        Skipping the stage step can sometimes make you include unwanted changes.
    
    3. Git Commit Log
        git log (To view the history of commits for a repository)

- Git Help 

    1. Git Help
        git command -help (See all the available options for the specific command)
        git help --all (See all possible commands)

- Git Branch

    1. New Git Branch 
        git branch hello-world-images (To create new branch)
        git branch (To check/ confrim new branch created)
        git checkout hello-world-images (To move the current branch to hello-world-images)

    2. Emergency Branch
        git checkout -b emergency-fix (To create and move to branch emergency-fix)

- Git Branch Merge 

    1. Merge Branch
        git merge emergency-fix (To merge emergency-fix to the checkout branch)
        git branch -d emergency-fix (To delete branch emergency-fix)
    2. Merge Conflict
        https://www.w3schools.com/git/git_branch_merge.asp?remote=github

- GitHub Get Started

    1. Create a Repository on GitHub 

    2. Push Local Repository to GitHub
        git remote add origin git@github.com:Pakelz/belajar-git.git (Using SSH)
        git push --set-upstream origin master or git push -u origin master
        

- Git Pull from Github 

    1. Git Fetch
        git fetch origin (To gets all the change history of a tracked branch/repo)
        git log origin/master 
        git diff origin/master (To verify by showing the differences between our local master and origin/master)

    2. Git Merge
        git merge origin/master (To combines the current branch, with a specified branch.)

    3. Git Pull
        git pull origin (To update our local Git)

- Git Push to GitHub

    1. Push Changes to GitHub
        git commit -a -m "message here" 
        git push origin 

- Git GitHub Branch

    1. Pulling a Branch from GitHub
        git pull 
        git status
        git branch
        git branch -a (To see all local and remote branch) note : branch -r is for remote only.
        git checkout html-skeleton ; note : html-skeleton is branch we created on GitHub
        git pull

    2. Push a Branch to GitHub
        git checkout -b update-readme
        git status
        git add README.md
        git status
        git commit -m "message here"
        git push origin update-readme (To push the branch from our local Git repo to GitHub)
        